pipeline {
    // agent {
    //     docker {
    //         image 'mcr.microsoft.com/dotnet/sdk:9.0'
    //         args '-v //./pipe/docker_engine://./pipe/docker_engine'
    //     }
    // }

    agent any

    environment {
        EMAIL = 'dominhquan15623@gmail.com'
        DOTNET_CLI_TELEMETRY_OPTOUT = '1'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Debug Info') {
            steps {
                sh '''
                    echo "=== Current Directory ==="
                    pwd
                    echo "=== Directory Listing ==="
                    ls -al
                    echo "=== Git Status ==="
                    git status || echo "Not a git repository"
                '''
            }
        }

        stage('Environment Check') {
            steps {
                script {
                    sh 'dotnet --version'
                    sh 'dotnet --info'
                    sh 'docker version'
                }
            }
        }
        
        stage('Restore') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet restore'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet build --no-restore -c Release'
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    dir('src') {
                        sh 'dotnet test --no-build --logger "trx;LogFileName=test_results.trx"'
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('src/**/TestResults/*.trx')) {
                            step([$class: 'MSTestPublisher', testResultsFile: 'src/**/TestResults/*.trx'])
                        }
                    }
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet format --verify-no-changes'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageName = "nexthire-app:${env.BUILD_NUMBER}"
                    def latestImageName = "nexthire-app:latest"
                    
                    sh "docker build -f src/NextHireApp.HttpApi.Host/Dockerfile -t ${imageName} -t ${latestImageName} ."
                    
                    // Save image info for later stages
                    env.DOCKER_IMAGE = imageName
                    env.DOCKER_IMAGE_LATEST = latestImageName
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    sh '''
                        docker stop nexthire-staging || true
                        docker rm nexthire-staging || true
                        docker run -d --name nexthire-staging -p 8080:80 \
                            -e ASPNETCORE_ENVIRONMENT=Staging \
                            ${DOCKER_IMAGE}
                        sleep 10
                        curl -f http://localhost:8080/health || echo "Health check failed"
                    '''
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    sh '''
                        echo "Running integration tests on staging environment..."
                        curl -f http://localhost:8080/ || echo "Basic connectivity test failed"
                    '''
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh '''
                        docker stop nexthire-production || true
                        docker rm nexthire-production || true
                        docker run -d --name nexthire-production -p 80:80 \
                            -e ASPNETCORE_ENVIRONMENT=Production \
                            ${DOCKER_IMAGE}
                        sleep 15
                        curl -f http://localhost/ || echo "Production health check failed"
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                emailext (
                    subject: "Jenkins Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: """
                    Pipeline execution completed.
                    
                    Job: ${env.JOB_NAME}
                    Build Number: ${env.BUILD_NUMBER}
                    Build Status: ${currentBuild.currentResult}
                    Build URL: ${env.BUILD_URL}
                    
                    Check Jenkins for more details.
                    """,
                    to: "${env.EMAIL}"
                )
            }
        }
        success {
            script {
                echo 'Pipeline completed successfully!'
            }
        }
        failure {
            script {
                echo 'Pipeline failed. Check the logs for details.'
            }
        }
    }
}