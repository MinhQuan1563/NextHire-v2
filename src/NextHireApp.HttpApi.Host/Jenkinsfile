pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        EMAIL = 'dominhquan15623@gmail.com'
        DOTNET_CLI_TELEMETRY_OPTOUT = '1'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
    }

    stages {
        stage('Environment Check') {
            steps {
                script {
                    '''
                        echo "=== .NET version ==="
                        dotnet --version
                        echo "=== Docker version ==="
                        docker version
                    '''
                }
            }
        }
        
        stage('Restore') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet restore'
                    }
                }
            }
        }

        stage('Build') {
            when {
                branch 'main'
            }
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet build --no-restore -c Release'
                    }
                }
            }
        }

        // stage('Unit Tests') {
        //     steps {
        //         script {
        //             dir('src') {
        //                 sh 'dotnet test --no-build --logger "trx;LogFileName=test_results.trx"'
        //             }
        //         }
        //     }
        //     post {
        //         always {
        //             script {
        //                 if (fileExists('src/**/TestResults/*.trx')) {
        //                     step([$class: 'MSTestPublisher', testResultsFile: 'src/**/TestResults/*.trx'])
        //                 }
        //             }
        //         }
        //     }
        // }

        // stage('Code Analysis') {
        //     steps {
        //         script {
        //             dir('src/NextHireApp.HttpApi.Host') {
        //                 sh 'dotnet format --verify-no-changes'
        //             }
        //         }
        //     }
        // }

        // stage('Build Docker Image') {
        //     steps {
        //         script {
        //             def imageName = "nexthire-app:${env.BUILD_NUMBER}"
        //             def latestImageName = "nexthire-app:latest"
                    
        //             sh "docker build -f src/NextHireApp.HttpApi.Host/Dockerfile -t ${imageName} -t ${latestImageName} ."
                    
        //             // Save image info for later stages
        //             env.DOCKER_IMAGE = imageName
        //             env.DOCKER_IMAGE_LATEST = latestImageName
        //         }
        //     }
        // }

        // stage('Deploy to Staging') {
        //     steps {
        //         script {
        //             sh '''
        //                 docker stop nexthire-staging || true
        //                 docker rm nexthire-staging || true
        //                 docker run -d --name nexthire-staging -p 8080:80 \
        //                     -e ASPNETCORE_ENVIRONMENT=Staging \
        //                     ${DOCKER_IMAGE}
        //                 sleep 10
        //                 curl -f http://localhost:8080/health || echo "Health check failed"
        //             '''
        //         }
        //     }
        // }

        // stage('Integration Tests on Staging') {
        //     steps {
        //         script {
        //             sh '''
        //                 echo "Running integration tests on staging environment..."
        //                 curl -f http://localhost:8080/ || echo "Basic connectivity test failed"
        //             '''
        //         }
        //     }
        // }

        // stage('Deploy to Production') {
        //     when {
        //         branch 'main'
        //     }
        //     steps {
        //         script {
        //             sh '''
        //                 docker stop nexthire-production || true
        //                 docker rm nexthire-production || true
        //                 docker run -d --name nexthire-production -p 80:80 \
        //                     -e ASPNETCORE_ENVIRONMENT=Production \
        //                     ${DOCKER_IMAGE}
        //                 sleep 15
        //                 curl -f http://localhost/ || echo "Production health check failed"
        //             '''
        //         }
        //     }
        // }
    }

    post {
        always {
            script {
                emailext (
                    subject: "Jenkins Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: """
                    Pipeline execution completed.
                    
                    Job: ${env.JOB_NAME}
                    Build Number: ${env.BUILD_NUMBER}
                    Build Status: ${currentBuild.currentResult}
                    Build URL: ${env.BUILD_URL}
                    
                    Check Jenkins for more details.
                    """,
                    to: "${env.EMAIL}"
                )
            }
        }
        success {
            script {
                echo 'Pipeline Quan completed successfully!'
            }
        }
        failure {
            script {
                echo 'Pipeline Quan failed. Check the logs for details.'
            }
        }
    }
}